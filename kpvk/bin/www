#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('kpvk:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {



  // create databases requered for running this application

  var create_user_table_sql = `
  CREATE TABLE IF NOT EXISTS user (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_name VARCHAR(255) NOT NULL,
	  user_password VARCHAR(255) NOT NULL,
    mobile_number VARCHAR(255) NOT NULL,
    gender SET('male','female','other'),
    address VARCHAR(255) NOT NULL,
    village VARCHAR(255) NOT NULL,
    user_status BOOLEAN,
     doj DATETIME,
     NoOfCatels INT null,
     NoOfLiters INT null,
     
     UserType  VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP
)  ENGINE=INNODB;`;

var drop_user_table_sql =`drop table IF  EXISTS user`;


var insertinto_user_table_sql =`INSERT INTO user(user_name,user_password,mobile_number,gender,address,village,user_status,doj,NoOfCatels,NoOfLiters,UserType)VALUES ?`;
var insertinto_user_values=[
  ['admin','$2a$12$50.MTQBw3XtEaR/Rigb0/epgV0CL5GusRIuY/2HSsYBDFShmH7unS','9966244689','male','marrama temple street ','Kalyandurgam',true,'now()',5,50,'ADMIN'],
  ['PomAdmin','$2a$12$50.MTQBw3XtEaR/Rigb0/epgV0CL5GusRIuY/2HSsYBDFShmH7unS','9538666004','male','marrama temple street ','Kalyandurgam',true,'now()',10,100,'POM'],
]



  
db.query(drop_user_table_sql, function (err, result) {  
  if (err) throw err;  
      console.log("==========================#sql:query excuited======================");
      console.log(drop_user_table_sql);
      console.log("==========================#sql:query excuited======================");
});  


db.query(create_user_table_sql, function (err, result) {  
  if (err) throw err;  
        console.log("==========================#sql:query excuited======================");
        console.log(create_user_table_sql);
        console.log("==========================#sql:====================================");
});  

db.query(insertinto_user_table_sql, [insertinto_user_values],function (err, result) {  
  if (err) throw err;  
        console.log("==========================#sql:query excuited======================");
        console.log("Number of records inserted: " + result.affectedRows);
        console.log("==========================#sql:====================================");
});  
  


  
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
